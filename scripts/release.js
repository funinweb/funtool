const inquirer = require("inquirer").default
const fs = require("fs-extra")
const path = require("path")
const { execSync } = require("child_process")
const semver = require("semver")
const { getDate, updateChangelog, updateVersion } = require("./version-manager")
const { initChangelog } = require("./changelog-manager/initChangelog")
const { editBilingualChangelog } = require("./changelog-manager")

const DEFAULT_NPM_REGISTRY = "https://registry.npmjs.org/"
const CUSTOM_NPM_REGISTRY = "http://localhost:4873/"

const LANGUAGES = {
	"zh-CN": {
		name: "‰∏≠Êñá",
		chooseLanguage: "ËØ∑ÈÄâÊã©ËØ≠Ë®Ä:",
		chooseVersionStrategy: "ËØ∑ÈÄâÊã©ÁâàÊú¨Á≠ñÁï•:",
		chooseVersionType: "ËØ∑ÈÄâÊã©ÂèëÂ∏ÉÁ±ªÂûã:",
		chooseChangeType: "ËØ∑ÈÄâÊã©Êõ¥ÊîπÁ±ªÂûã:",
		choosePreid: "ËØ∑ÈÄâÊã©È¢ÑÂèëÂ∏ÉÊ†áËØÜ:",
		confirmPublish: "Á°ÆËÆ§ÂèëÂ∏ÉÂêóÔºü",
		releaseSuccess: "ÂèëÂ∏ÉÊàêÂäüÔºåÁâàÊú¨Â∑≤Êé®ÈÄÅÂà∞ GitHubÔºÅ",
		publishCancelled: "ÂèëÂ∏ÉÂ∑≤ÂèñÊ∂à",
		npmLoginRequired: "Êú™Ê£ÄÊµãÂà∞ npm Áî®Êà∑ÁôªÂΩïÔºåËØ∑‰ΩøÁî® `npm login` ÁôªÂΩï„ÄÇ",
		useCustomRegistry: "ÊòØÂê¶‰ΩøÁî®Ëá™ÂÆö‰πâ npm ‰ªìÂ∫ìÔºü",
		npmRegistrySet: "Â∑≤ËÆæÁΩÆ npm ‰ªìÂ∫ì‰∏∫:",
		versionUpdating: "ÁâàÊú¨Â∞ÜÊõ¥Êñ∞‰∏∫:",
		npmLogin: "Áî®Êà∑Â∑≤ÁôªÂΩïÂà∞ npm",
		openEditorError: "Êó†Ê≥ïÊâìÂºÄÁºñËæëÂô®ÔºåËØ∑Á°Æ‰øùÁ≥ªÁªüÂ∑≤ÂÆâË£ÖÈªòËÆ§ÊñáÊú¨ÁºñËæëÂô®„ÄÇ",
		versionError: "ÂΩìÂâçÁâàÊú¨‰∏çÊòØÈ¢ÑÂèëÂ∏ÉÁâàÊú¨ÔºåÊó†Ê≥ïÁªßÁª≠Ëø≠‰ª£",
		buildStart: "üì¶ Ê≠£Âú®ÊûÑÂª∫È°πÁõÆ...",
		buildSuccess: "üì¶ ÊûÑÂª∫ÂÆåÊàêÔºåÊ≠£Âú®ÂèëÂ∏ÉÂà∞ npm...",
		buildOrPublishFail: "‚ùå ÊûÑÂª∫ÊàñÂèëÂ∏ÉÂ§±Ë¥•Ôºö",
		publishNpmSuccess: "üéâ npm ÂèëÂ∏ÉÊàêÂäüÔºÅ",
		askPublishToNpm: "ÊòØÂê¶ÁªßÁª≠ÂèëÂ∏ÉÂà∞ npm ‰ªìÂ∫ìÔºü",
		skipPublishToNpm: "Â∑≤Ë∑≥Ëøá npm ÂèëÂ∏É„ÄÇ",
	},
	"en-US": {
		name: "English",
		chooseLanguage: "Select Language:",
		chooseVersionStrategy: "Select version strategy:",
		chooseVersionType: "Select release type:",
		chooseChangeType: "Select change type:",
		choosePreid: "Select prerelease identifier:",
		confirmPublish: "Confirm to publish?",
		releaseSuccess: "Release successful, version pushed to GitHub!",
		publishCancelled: "Publish cancelled",
		npmLoginRequired: "No npm user detected, please login with `npm login`.",
		useCustomRegistry: "Use custom npm registry?",
		npmRegistrySet: "Npm registry set to:",
		versionUpdating: "The version will be updated to:",
		npmLogin: "User is logged in to npm",
		openEditorError: "Unable to open editor, please ensure you have a default text editor installed.",
		versionError: "Current version is not a pre-release version, cannot continue iteration",
		buildStart: "üì¶ Building project...",
		buildSuccess: "üì¶ Build complete, publishing to npm...",
		buildOrPublishFail: "‚ùå Build or publish failed:",
		publishNpmSuccess: "üéâ Published to npm successfully!",
		askPublishToNpm: "Continue to publish to npm registry?",
		skipPublishToNpm: "Skipped npm publish.",
	},
}

const EMOJIS = {
	"zh-CN": [
		{ name: "‚ú® Êñ∞ÂäüËÉΩ", value: "feat" },
		{ name: "üêû Bug‰øÆÂ§ç", value: "fix" },
		{ name: "üìñ ÊñáÊ°£Êõ¥Êñ∞", value: "docs" },
		{ name: "üåê ÂõΩÈôÖÂåñ", value: "i18n" },
		{ name: "üßπ Êó•Â∏∏Áª¥Êä§", value: "chore" },
		{ name: "‚ôªÔ∏è ‰ª£Á†ÅÈáçÊûÑ", value: "refactor" },
	],
	"en-US": [
		{ name: "‚ú® Features", value: "feat" },
		{ name: "üêû Bug Fixes", value: "fix" },
		{ name: "üìñ Documentation", value: "docs" },
		{ name: "üåê I18n", value: "i18n" },
		{ name: "üßπ Chores", value: "chore" },
		{ name: "‚ôªÔ∏è Refactors", value: "refactor" },
	],
}

let selectedLang = "en-US"
function log(messageKey, ...params) {
	const message = LANGUAGES[selectedLang][messageKey]
	if (!message) return console.log(`Missing key: ${messageKey}`)
	console.log(message, ...params)
}

async function openMarkdownEditor(filePath) {
	try {
		execSync(`open ${filePath}`, { stdio: "inherit" })
	} catch (error) {
		console.error(LANGUAGES[selectedLang].openEditorError)
		process.exit(1)
	}
}

async function chooseLanguage() {
	const { language } = await inquirer.prompt([
		{
			type: "list",
			name: "language",
			message: LANGUAGES[selectedLang].chooseLanguage,
			choices: Object.entries(LANGUAGES).map(([key, value]) => ({ name: value.name, value: key })),
		},
	])
	selectedLang = language
}

async function chooseVersionStrategy() {
	const { strategy } = await inquirer.prompt([
		{
			type: "list",
			name: "strategy",
			message: LANGUAGES[selectedLang].chooseVersionStrategy,
			choices: [
				{
					name:
						selectedLang === "zh-CN"
							? "üîÅ ÁªßÁª≠È¢ÑÂèëÂ∏ÉÁâàÊú¨ (‰æãÂ¶ÇÔºö1.0.2-alpha.1)"
							: "üîÅ Continue prerelease (e.g., 1.0.2-alpha.1)",
					value: "continue",
				},
				{ name: selectedLang === "zh-CN" ? "üÜï ÈÄâÊã©Êñ∞ÁöÑÁâàÊú¨Á±ªÂûã" : "üÜï Choose new version type", value: "new" },
			],
		},
	])
	return strategy
}

async function chooseVersionType() {
	const { versionType } = await inquirer.prompt([
		{
			type: "list",
			name: "versionType",
			message: LANGUAGES[selectedLang].chooseVersionType,
			choices: ["patch", "minor", "major", "prepatch", "preminor", "premajor"].map((v) => ({
				name: `${v} (${semver.inc("0.0.0", v)})`,
				value: v,
			})),
		},
	])
	return versionType
}

async function choosePreid() {
	const { preid } = await inquirer.prompt([
		{
			type: "list",
			name: "preid",
			message: LANGUAGES[selectedLang].choosePreid,
			choices: ["alpha", "beta", "rc"],
		},
	])
	return preid
}

async function chooseChangeType() {
	const { changeType } = await inquirer.prompt([
		{
			type: "list",
			name: "changeType",
			message: LANGUAGES[selectedLang].chooseChangeType,
			choices: EMOJIS[selectedLang],
		},
	])
	return changeType
}

async function confirmPublish() {
	const { confirm } = await inquirer.prompt([
		{
			type: "confirm",
			name: "confirm",
			message: LANGUAGES[selectedLang].confirmPublish,
			default: false,
		},
	])
	return confirm
}

async function checkNpmLogin() {
	try {
		execSync("npm whoami", { stdio: "pipe" })
		log("npmLogin")
	} catch {
		log("npmLoginRequired")
		process.exit(1)
	}
}

async function setNpmRegistry() {
	const { useCustomRegistry } = await inquirer.prompt([
		{
			type: "confirm",
			name: "useCustomRegistry",
			message: LANGUAGES[selectedLang].useCustomRegistry,
			default: false,
		},
	])
	const registry = useCustomRegistry ? CUSTOM_NPM_REGISTRY : DEFAULT_NPM_REGISTRY
	execSync(`npm config set registry ${registry}`)
	log("npmRegistrySet", registry)
}

async function publishRelease(version) {
	log("versionUpdating", version)
	await updateVersion(version)
	execSync("git add .")
	execSync(`git commit -m "chore: release ${version}"`)
	execSync(`git tag v${version}`)
	execSync("git push origin main")
	execSync("git push --tags")
	log("releaseSuccess")
}

// Dry-run ÊîØÊåÅ
const isDryRun = process.argv.includes("--dry-run")

async function main() {
	await chooseLanguage()
	await initChangelog()
	await checkNpmLogin()
	await setNpmRegistry()

	const pkg = JSON.parse(await fs.readFile("package.json", "utf-8"))
	const currentVersion = pkg.version
	let nextVersion

	const strategy = await chooseVersionStrategy()
	if (strategy === "continue") {
		const preid = semver.prerelease(currentVersion)?.[0]
		if (!preid) {
			console.error(LANGUAGES[selectedLang].versionError)
			process.exit(1)
		}
		nextVersion = semver.inc(currentVersion, "prerelease", preid)
	} else {
		const versionType = await chooseVersionType()
		let preid
		if (["prepatch", "preminor", "premajor"].includes(versionType)) {
			preid = await choosePreid()
		}
		nextVersion = semver.inc(currentVersion, versionType, preid)
	}

	const changeType = await chooseChangeType()
	await editBilingualChangelog(changeType, nextVersion, LANGUAGES[selectedLang].openEditorError)

	if (isDryRun) {
		console.log(`Dry-run mode: Version ${nextVersion} update simulated (no actual changes made).`)
		process.exit(0)
	}

	if (await confirmPublish()) {
		await publishRelease(nextVersion)
		const { publishToNpm } = await inquirer.prompt([
			{
				type: "confirm",
				name: "publishToNpm",
				message:
					selectedLang === "zh-CN" ? "ÊòØÂê¶ÁªßÁª≠ÂèëÂ∏ÉÂà∞ npm ‰ªìÂ∫ìÔºü" : "Continue to publish to npm registry?",
				default: true,
			},
		])

		if (publishToNpm) {
			try {
				log("buildStart")
				execSync("npm run build", { stdio: "inherit" })

				log("buildSuccess")
				execSync("npm publish", { stdio: "inherit" })

				log("publishNpmSuccess")
			} catch (error) {
				console.error(LANGUAGES[selectedLang].buildOrPublishFail, error.message)
				process.exit(1)
			}
		} else {
			log("skipPublishToNpm")
		}
	} else {
		log("publishCancelled")
	}
}

main()
